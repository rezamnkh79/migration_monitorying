version: '3.3'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

  #   MySQL Source Database (External - Using remote MySQL)
  #  mysql:
  #     image: mysql:8.0
  #     hostname: mysql
  #     container_name: mysql
  #     ports:
  #       - "${MYSQL_PORT:-3307}:3306"
  #     environment:
  #       MYSQL_ROOT_PASSWORD: debezium
  #       MYSQL_USER: debezium
  #       MYSQL_PASSWORD: dbz
  #       MYSQL_DATABASE: ${MYSQL_DATABASE:-inventory}
  #     volumes:
  #       - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
  #       - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
  #       - mysql_data:/var/lib/mysql
  #     command: --server-id=223344 --log-bin=mysql-bin --binlog-format=ROW --binlog-row-image=FULL --expire-logs-days=10

  # PostgreSQL Target Database
  postgres:
    image: postgres:15
    hostname: postgres
    container_name: postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DATABASE:-inventory}
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data

  # Kafka Connect with Debezium
  connect:
    image: debezium/connect:2.4
    hostname: connect
    container_name: connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-kafka:29092}
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_status
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
      CONNECT_PLUGIN_PATH: /kafka/connect
      # MySQL connection config for external server
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-kafka:29092}
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://connect:8083

  # Redis for caching and monitoring
  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: redis
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data

  # Data Validation Service
  data-validator:
    build:
      context: ./services/data-validator
      dockerfile: Dockerfile
    hostname: data-validator
    container_name: data-validator
    ports:
      - "${VALIDATOR_PORT:-8000}:8000"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs

  # Monitoring Dashboard
  monitoring-dashboard:
    build:
      context: ./services/monitoring-dashboard
      dockerfile: Dockerfile
    hostname: monitoring-dashboard
    container_name: monitoring-dashboard
    ports:
      - "${MONITORING_PORT:-3000}:3000"
    env_file:
      - .env

volumes:
  postgres_data:
  redis_data:
